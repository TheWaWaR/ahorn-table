// Generated by CoffeeScript 1.6.3
var initApp, initCurrentApp, iterPages;

iterPages = function(current, total) {
  var pagination;
  pagination = [1];
  if ((current - 1) > 2) {
    pagination.push.apply(pagination, [null, current - 1, current]);
  } else if (current === 3) {
    pagination.push.apply(pagination, [2, 3]);
  } else if (current === 2) {
    pagination.push(2);
  }
  if ((total - current) > 2) {
    pagination.push.apply(pagination, [current + 1, null]);
  } else if ((total - current) === 2) {
    pagination.push(current + 1);
  }
  if (total !== current) {
    pagination.push(total);
  }
  return pagination;
};

console.log(iterPages(3, 14));

initApp = function(appName, ctrlName, jsonUrl, templateBaseUrl, templateToolbarLeft) {
  var tableApp;
  tableApp = angular.module(appName, []);
  return tableApp.controller(ctrlName, [
    '$scope', '$http', function($scope, $http) {
      var defaultParams;
      defaultParams = {};
      $scope.actionMeta = {
        edit: {
          label: '编辑',
          icon: 'fa-edit',
          btn: 'btn-primary'
        },
        del: {
          label: '删除',
          icon: 'fa-trash-o',
          btn: 'btn-danger'
        }
      };
      $scope.tempToolbarLeft = templateToolbarLeft;
      $scope.tempBaseUrl = templateBaseUrl;
      $scope.targetPage = 1;
      $scope.loading = false;
      $scope.loadPage = function(params) {
        if (params.page === null) {
          return 0;
        }
        if (params.page < 1) {
          params.page = 1;
        }
        console.log("loadPage.BEGIN:", params, defaultParams);
        $.extend(defaultParams, params);
        console.log("loadPage.END:", defaultParams);
        $scope.loading = true;
        return ($http.get(jsonUrl, {
          params: defaultParams
        })).success(function(data) {
          var _;
          console.log("data:", data);
          $scope.title = data.title;
          $scope.keys = data.keys;
          $scope.headDict = data.headDict;
          $scope.sortableDict = data.sortableDict;
          $scope.typeDict = data.typeDict;
          $scope.actions = data.actions;
          $scope.rows = data.rows;
          $scope.oids = data.oids;
          $scope.count = data.count;
          $scope.page = data.page;
          $scope.targetPage = data.page;
          $scope.pages = data.pages;
          console.log('data.actions', data.actions);
          $scope.canEdit = 'edit' in data.actions ? true : false;
          $scope.canDel = 'del' in data.actions ? true : false;
          $scope.pagination = iterPages(data.page, data.pages);
          $scope.allSelected = false;
          $scope.selected = false;
          $scope.selectedCnt = 0;
          $scope.selectedRows = (function() {
            var _i, _ref, _results;
            _results = [];
            for (_ = _i = 1, _ref = data.rows.length; 1 <= _ref ? _i <= _ref : _i >= _ref; _ = 1 <= _ref ? ++_i : --_i) {
              _results.push(false);
            }
            return _results;
          })();
          $scope.loading = false;
          return console.log($scope.pagination, $scope.selected, $scope.allSelected);
        });
      };
      $scope.orderBy = function(order) {
        if ($scope.order != null) {
          $scope.orderDirection = $scope.orderDirection === 'desc' ? 'asc' : 'desc';
        } else {
          $scope.orderDirection = 'asc';
        }
        $scope.order = order;
        return $scope.loadPage({
          page: $scope.page,
          order: order,
          orderDirection: $scope.orderDirection
        });
      };
      $scope.filterBy = function(keyword) {
        console.log(keyword);
        $scope.keyword = keyword;
        return $scope.loadPage({
          page: $scope.page,
          keyword: keyword
        });
      };
      $scope.selectRow = function(idx) {
        var _;
        if (idx === -1) {
          if ($scope.selectedCnt === $scope.rows.length) {
            $scope.selectedRows = (function() {
              var _i, _ref, _results;
              _results = [];
              for (_ = _i = 1, _ref = $scope.rows.length; 1 <= _ref ? _i <= _ref : _i >= _ref; _ = 1 <= _ref ? ++_i : --_i) {
                _results.push(false);
              }
              return _results;
            })();
            $scope.selectedCnt = 0;
          } else {
            $scope.selectedRows = (function() {
              var _i, _ref, _results;
              _results = [];
              for (_ = _i = 1, _ref = $scope.rows.length; 1 <= _ref ? _i <= _ref : _i >= _ref; _ = 1 <= _ref ? ++_i : --_i) {
                _results.push(true);
              }
              return _results;
            })();
            $scope.selectedCnt = $scope.rows.length;
          }
        } else {
          $scope.selectedRows[idx] = !$scope.selectedRows[idx];
          if ($scope.selectedRows[idx]) {
            $scope.selectedCnt += 1;
          } else {
            $scope.selectedCnt -= 1;
          }
        }
        $scope.selected = $scope.selectedCnt > 0 ? true : false;
        return $scope.allSelected = $scope.selectedCnt === $scope.rows.length ? true : false;
      };
      $scope.del = function() {
        var i, selectedIdxs, selectedOids, _i, _ref;
        selectedIdxs = [];
        selectedOids = [];
        for (i = _i = 0, _ref = $scope.selectedRows.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if ($scope.selectedRows[i]) {
            selectedIdxs.push(i);
            selectedOids.push($scope.oids[i]);
          }
        }
        console.log(selectedIdxs, selectedOids);
        console.log($scope.actions.del.link, {
          oids: selectedOids.join(',')
        });
        return $.post($scope.actions.del.link, {
          oids: selectedOids.join(',')
        }, function() {
          return $scope.loadPage({
            page: $scope.page
          });
        });
      };
      $scope.gotoPage = function(targetPage) {
        if (targetPage == null) {
          return;
        }
        return $scope.loadPage({
          page: targetPage
        });
      };
      return $scope.loadPage({
        page: 1
      });
    }
  ]);
};

initCurrentApp = function(jsonUrl, templateToolbarLeft) {
  return initApp("tableApp", 'Ctrl', jsonUrl, "/static/partials/table.html", templateToolbarLeft);
};
